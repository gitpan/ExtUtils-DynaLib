This is ExtUtils::DynaLib, a Perl 5 module for calling C functions in
dynamic libraries.  Example:

  use ExtUtils::DynaLib;
  $libm = new ExtUtils::DynaLib("-lm");
  $sinh = $libm->DeclareSub("sinh", "d", "d");
  print "The hyperbolic sine of 3 is ", &$sinh(3), "\n";


	***********************************************************
	***   THIS CODE CONTAINS SYSTEM DEPENDENCIES.           ***
	***   IT WILL NOT WORK ON ALL COMPILERS, MACHINES, OR   ***
	***   OPERATING SYSTEMS.        USE AT YOUR OWN RISK.   ***
	***********************************************************


The module has been tested successfully on iX86, Sparc, and Alpha
machines.  However, there are probably compilers for these chips with
which it will not work.  If you tell me, I might fix it.

Included are the following packages:

  ExtUtils::DynaLib            - interface to dynamic libraries
  ExtUtils::DynaLib::Callback  - convert a perl sub into a usable
                                     C function pointer
  ExtUtils::DynaLib::Struct    - yet another tool for handling C
                                     compound data structures

To build this module, run the usual

  perl Makefile.PL
  make test

Various things can go wrong.  First, your perl must be of the dynamic
variety.  Be sure you answered "y" when Configure asked, "Do you wish
to use dynamic loading?".

The biggest issue in porting this module is your system's function
call interface.  If Makefile.PL prints that it is using `hack30', it
is a sign that your system is not yet supported.  Another sign of
trouble is when `make test' prints `not ok' or `Illegal memory
operation'.  Further documentation in pod format is in DynaLib.pm.

The callback feature has sometimes caused grief in building the
module.  If Makefile.PL writes a makefile but you can't get it to
build, try `perl Makefile.PL CALLBACKS=0' followed by `make test',
and tell me of your success or failure.


COPYRIGHT

The files named in MANIFEST, accompanying this file, are Copyright (c)
1997 by John Tobey.  They may be modified, distributed and used under
the same conditions as Perl itself.  Of course, there is no express or
implied warranty.  See the file README in the top-level Perl source
directory for more information.

Enjoy!
-John
jtobey@channel1.com
